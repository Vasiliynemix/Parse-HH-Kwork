import os

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile

from src.bot.fsm_logic import FSMSettingsParse
from src.bot.keyboards.keyboards import keyboard
from src.parser.parseHH import ParseHH

router = Router()


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.set_state(FSMSettingsParse.start)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                         reply_markup=keyboard.kb.get_start_kb())


@router.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É')
async def settings_parser(message: Message, state: FSMContext):
    await state.set_state(FSMSettingsParse.start)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                         reply_markup=keyboard.kb.get_start_kb())


@router.message(F.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä')
async def get_name_for_parser(message: Message, state: FSMContext):
    await state.set_state(FSMSettingsParse.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å\n\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"',
                         reply_markup=keyboard.kb.get_prev_cancel_kb())


@router.message(FSMSettingsParse.name)
async def get_price_for_parser(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(FSMSettingsParse.price)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é(—Ä—É–±)\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"',
                         reply_markup=keyboard.kb.get_cancel_kb())


@router.message(FSMSettingsParse.price, F.text == '–ù–∞–∑–∞–¥')
async def prev_fsm(message: Message, state: FSMContext):
    await state.set_state(FSMSettingsParse.name)
    await message.answer('–°–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é\n\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"',
                         reply_markup=keyboard.kb.get_prev_cancel_kb())


@router.message(FSMSettingsParse.price)
async def get_price_for_parser(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(FSMSettingsParse.result)
    await message.answer('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"',
                         reply_markup=keyboard.kb.get_result_settings())


@router.message(FSMSettingsParse.result, F.text == '–ù–∞–∑–∞–¥')
async def prev_fsm(message: Message, state: FSMContext):
    await state.set_state(FSMSettingsParse.price)
    await message.answer('–°–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É\n\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"',
                         reply_markup=keyboard.kb.get_prev_cancel_kb())


@router.message(FSMSettingsParse.result, F.text == '–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞')
async def get_settings_for_parser(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.set_state(FSMSettingsParse.run)
    await message.answer(f'–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {data["name"]}\n'
                         f'–¶–µ–Ω–∞ –æ—Ç: {data["price"]}\n\n'
                         f'–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥üëá',
                         reply_markup=keyboard.ikb.run_parse())


@router.callback_query(FSMSettingsParse.run, lambda c: c.data == 'run_parse')
async def run_parser(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await call.answer()
    await state.set_state(FSMSettingsParse.document)
    await ParseHH(callback=call, name=data['name'], price=data['price']).parse()
    await call.message.answer(f'–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\nname = {data["name"]}\nprice = {data["price"]}',
                              reply_markup=keyboard.kb.get_result_doc())


@router.message(FSMSettingsParse.document, F.text == '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µüëá')
async def set_document(message: Message, state: FSMContext):
    await state.set_state(FSMSettingsParse.start)
    path = os.path.abspath('hh_data.csv')
    await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–Ω–æ–π\n'
                         '–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –≤ csvüëá')
    await message.answer_document(FSInputFile(path), reply_markup=keyboard.kb.get_start_kb())
    os.remove(path)
